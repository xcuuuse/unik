1. создать локальный репозиторий в текущей папке (git init)
2. посмотреть статус текущего репозитория (git status)
3. что такое ветка и какая ветка является обычно основной
Ветка в Git — это набор коммитов, расположенных в хронологическом порядке. У каждой ветки есть свое название. Основная ветка чаще всего называется master, она появляется при инициализации репозитория и считается главной веткой проекта.

4. добавить файл в контекст, который будет коммититься (git add <file>)
5. создать коммит на основе текущего контекста и указать для него комментарий (git commit -m <имя коммита>)
6. создать коммит, включающий изменения всех наблюдаемых файлов и указать для него комментарий (1.git add .) ( 2. git commit -m <name>)
7. посмотреть протокол(лог) коммитов (git log)
8. посмотреть информацию о текущих настройках( git config --list)
9. убрать файл из контекста(git reset HEAD <имя_файла>)git 
10. посмотреть изменения в файле по сравнению с последним коммитом 
(git diff 4612297 5e356cf сравнение коммитов ) ( git diff- Команда выводит изменения в файлах, которые еще не были добавлены в индекс. Сравнение происходит с последним коммитом.)

11. убрать изменения относительно последнего коммита из файла
(git checkout -- myfile.txt)
12. добавить в контекст коммита все измененные и созданный файлы
(git add .. )
13. изменить глобальные/локальные настройки 
(git config --global )
14. переписать имя пользователя
(git config --global user.name <name>)
15. просмотреть существующие ветки ( git branch)
16. создать новую ветку  (git branch <branch name>)
17. переключиться на другую ветку(git checkout <branch name>)
18. создать новую ветку и сразу же переключиться на неё(git checkout -b <branch name>)
19. удалить ветку/удалить ветку, даже если она не примержена 
(git branch -d <branch name> )
20. примержить изменения из указанной ветки в текущую ( git merge <name branch> слияние происходит с текущей веткой )
21. в каком случае могут появиться конфликты? сделать конфликт
22. как посмотреть в каких файлах конфликты (git status, для более подробной 
можно использовать git diff)
23. как устранить конфликты ( вручную)
24. как переключиться на указанный коммит(git chekout <commit hash>)
25. сделать ребазирование(rebase) текущей ветки (git rebase <name branch>)
26. устранение конфликтов во время ребазирования (вручную , а потом git rebase --continue)
27. отменить ребазирование во время конфликтов 
(git rebase --abort
Эта команда отменяет все изменения, связанные с ребазированием, и восстанавливает ветку в ее предыдущее состояние.)
28. пропустить текущий конфликтный коммит и перейти к следующему
(git rebase --skip)
29. отправить изменения из локального репозитория для указанной ветки в удалённый(дистанционный) репозиторий (git push)
30. забрать изменения из репозитория, для которого были созданы удалённые ветки по умолчанию(git pull)
31. забрать изменения удалённой ветки из репозитория по умолчанию, основной ветки(git pull <remote_name> <branch_name>)
32. создание копии репозитория
(git clone <remote_repository_url> [<local_directory_name>])
33. удаление и переименование файла (git rm ) (git mv)
34. создание, удаление и отправка файла в удалённый репозиторий, удаление файла в удалённом репозитории ( предыдущие команды)
35. отправка ветки в удалённый репозиторий, удаление ветки в удалённом репозитории (
git push <remote_name> <branch_name>
```

Например, если ваш удаленный репозиторий называется "origin", а ветка, которую вы хотите отправить, называется "feature":

````bash
git push origin feature
```

Ваша ветка будет отправлена в удаленный репозиторий.)

git push <remote_name> --delete <branch_name>
```

Например, если ваш удаленный репозиторий называется "origin", а ветка, которую вы хотите удалить, называется "feature":

````bash
git push origin --delete feature
```

Ветка "feature" будет удалена из удаленного репозитория. 
